;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;All simulations of on chain interactions in ng starts with cancelling deprecated software
;;We need to send in an boolean into the sandbox that tells NG to turn marmalade off 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(env-data {"disable-marmalade":true})

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;Now you load up Pascal's sandbox so everything knits up
;;----------------------------------------------------------------------------
;;Credit:  Crypto Pascal
;;Location: https://github.com/CryptoPascal31/kadena_repl_sandbox.git
;;----------------------------------------------------------------------------
;;Use git clone to pull down the library and place it in the respective path.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(load "../kadena_repl_sandbox/kda-env/init.repl")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;We will set up the relevant environmental data to set up the collection
;;----------------------------------------------------------------------------
;;Credit: Amir Dapl
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(begin-tx "create collection")
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; import the relevant kets that will be needed
  ;; In the sandbox is can be strings like this but in the
  ;; real world they will be keysets (crypto hashes)
  ;; generated from your keypair software (kda-tool) 
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (env-keys ["kdabet-admin" "kdabet-operation" "kdabet-bank"])

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Load up environmental data.  This data is usually send in a 
  ;; transaction "command" but in the repl here we are simulating
  ;; these transactions with (env-data ...).
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (env-data {
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; Describe the keys you want to add to the simulations
    ;; Generally we have admin (governance) ops (operations) and
    ;; banking which is a special key for financial ops.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    "kdabet-admin": {"keys": ["kdabet-admin"],"pred": "keys-any"},
    "kdabet-operation": {"keys": ["kdabet-operation"],"pred": "keys-any"},
    "kdabet-bank": {"keys": ["kdabet-bank"],"pred": "keys-all"},
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; Describe any guards you want in the form of a key
    ;; Here we have the bankguard (only governance here) 
    ;; we also have the collection creator guard which in our case
    ;; is the operations keyset.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    "bank-guard": {"keys": ["kdabet-admin"],"pred": "keys-all"},
    "creatorGuard": {"keys": ["kdabet-operation"],"pred": "keys-all"},
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; Define the collection!  
    ;;------------------------------------------------------------
    ;; name -> name the collection
    ;; creator -> <keyset>
    ;; creatorGuard -> [<keyset>]  no random creators
    ;; description: describe the collection
    ;; types: describes the Lords and Kings
    ;; typedata: describes the whitelist
    ;; typepolicies: describes the NG policies for each type
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    "collection": {
      "name": "kadena-kings",
      "creator": "kdabet-operation",
      "creatorGuard": {
        "keys": ["kdabet-operation", "kdabet-user"],
        "pred": "keys-any"
      },
      "collection-name": "kadena-kings", 
      "description": "The kadena king is a utility NFT that governs the finance of the kdabet protocol",
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;;NOTE: There is a limited amount of time for the king to mint
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      "types": [
         {
          "tierId": "king",
          "startTime": {"time": "2023-01-03T20:00:00Z"},
          "endTime": {"time": "2024-01-03T00:00:00Z"},
          "cost": 300.0,
          "limit": 1,
          "currencyType": "USD"
        },
         {
          "tierId": "lord",
          "startTime": {"time": "2024-01-04T00:00:01Z"},
          "endTime": {"time": "2024-01-09T00:00:00Z"},
          "cost": 0.0,
          "limit": 500,
          "currencyType": "USD"
        }
      ],
      "type-data": [
        {
          "Id": "king",
          "accounts": ["kdabet-user"]
        },
        {
          "Id": "lord",
          "accounts": ["kdabet-ops"]
        }
      ]
    },
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; This is the critical messaging to the smart contract
    ;; with respect to firing 
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    "type-policies": [
      {"king": {
         "royalty_spec": {
         "fungible": coin
         ,"creator": "alice"
         ,"creator-guard": {"keys": ["alice-key"], "pred": "keys-all"}
         ,"royalty-rate": 0.00
         },
         "can-offer": true,
         "can-buy": true,
         "can-transfer": true,
         "can-burn": false,
         "can-xchain": true,
         "can-lend": true
       },
        "lord": {
         "royalty_spec": {
         "fungible": coin
         ,"creator": "alice"
         ,"creator-guard": {"keys": ["alice-key"], "pred": "keys-all"}
         ,"royalty-rate": 0.00
         },
         "can-offer": false,
         "can-buy": false,
         "can-transfer": false,
         "can-burn": false,
         "can-xchain": false,
         "can-lend": true
        }
      }
    ],
    "upgrade": false
  })
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;Now load the smart contract
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (load "kingsmint.pact")

(commit-tx)
